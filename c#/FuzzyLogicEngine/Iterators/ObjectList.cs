// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;

using FuzzyLogic;

namespace FuzzyLogic
{
	public interface IObjectList : IEnumerable
	{
		new IEnumerator GetEnumerator ();
		int Count { get; }
	}

	public interface IIndirectObjectList : IEnumerable
	{
		new IEnumerator GetEnumerator ();
		int Count { get; }
		void Add (object obj);
	}
	public sealed class ObjectList <TObject> : IObjectList, IEnumerable < TObject > where TObject : Object
	{
		public ObjectList ( Engine referee )
		{
			theReferee = referee;
		}
		readonly Engine theReferee;
		public IEnumerator<TObject> GetEnumerator ()
		{
			return new ObjectIterator<TObject> (theReferee);
		}
		IEnumerator IEnumerable.GetEnumerator ()
		{
			return new ObjectIterator<TObject> (theReferee);
		}
		IEnumerator IObjectList.GetEnumerator ()
		{
			return new ObjectIterator<TObject> (theReferee);
		}
		public TObject this [string name] {
			get {
				foreach (Object obj in theReferee.internals) {
					if (obj as TObject != null) {
						if ((obj as NamedObject).Name == name)
							return (TObject)obj;
					}
				}
				throw new IndexOutOfRangeException ();
			}
		}
		public int Count {
			get {
				if (theReferee.internals == null)
					return 0;
				int result = 0;
				foreach (Object obj in theReferee.internals) {
					if (obj as TObject != null) {
						result++;
					}
				}
				return result;
			}
		}
	}
	public sealed class IndirectObjectList <TObject> : IIndirectObjectList, IEnumerable < TObject > where TObject : Object
	{
		public IndirectObjectList ( Engine referee, List < int > elements )
		{
			theReferee = referee;
			theElements = elements;
		}
		readonly Engine theReferee;
		List < int > theElements;
		public void Add ( TObject obj ) {
			theElements.Add (obj.ID);
		}
		void IIndirectObjectList.Add (object obj)
		{
			Add (obj as TObject);
		}


		public IEnumerator<TObject> GetEnumerator ()
		{
			return new IndirectObjectIterator<TObject> (theReferee, theElements);
		}
		IEnumerator IEnumerable.GetEnumerator ()
		{
			return new IndirectObjectIterator<TObject> (theReferee, theElements);
		}
		IEnumerator IIndirectObjectList.GetEnumerator ()
		{
			return new IndirectObjectIterator<TObject> (theReferee, theElements);
		}
		public TObject this [int index] {
			get {
				if ((index < 0) || (index >= theElements.Count))
					throw new IndexOutOfRangeException ();
				int id = theElements [index];
				if ((id < 0) || (id >= theReferee.internals.Count))
					throw new IndexOutOfRangeException ();
				return (TObject) theReferee.internals [id];
			}
		}
		public int Count {
			get {
				return theElements.Count;
			}
		}
	}
}

