// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

using Conjunction = FuzzyLogicSolver.TNorm;
using Disjunction = FuzzyLogicSolver.SNorm;
using Activation = FuzzyLogicSolver.TNorm;
using Accumulation = FuzzyLogicSolver.SNorm;
using Defuzzyfier = FuzzyLogicSolver.Defuzzyfier;

namespace FuzzyLogicSolver
{
	public class Accumulated
	{
		public List < Activated > terms = new List<Activated>();
		public float minimum, maximum;
		public Accumulated (string nm, float vm, float vM)
		{
			minimum = vm;
			maximum = vM;
		}
		//
		public Accumulation Accumulation { get; set; }
		//
		public void AddTerm ( Activated term )
		{
			terms.Add (term);
		}
		public void Clear ()
		{
			terms.Clear ();
		}
		//
		public float Membership ( float value )
		{
			float mu = 0;
			foreach (Activated term in terms)
				mu = Accumulation.Compute (mu, term.Membership (value));
			return mu;
		}
		public float ActivationDegree ( Curve forTerm )
		{
			float result = 0;
			foreach (Activated term in terms)
				if (term.Term == forTerm) {
					if ( Accumulation != null )
						result = Accumulation.Compute (result, term.Degree);
					else
						result += term.Degree;
				}
			return result;
		}
		//
	}
}

